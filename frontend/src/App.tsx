import { useState } from 'react';
import './App.css';

function App() {
  const [topic, setTopic] = useState<string>('');
  const [language, setLanguage] = useState<string>('Fran√ßais');
  const [speakers, setSpeakers] = useState<string>('Homme & Homme');
  const [audioUrl, setAudioUrl] = useState<string | null>(null);
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);
  const [showTranscript, setShowTranscript] = useState<boolean>(false);
  const [transcript, setTranscript] = useState<string>('');
  const [audioFile, setAudioFile] = useState<File | null>(null);
  const [transcriptionResult, setTranscriptionResult] = useState<string>('');
  const [transcribing, setTranscribing] = useState<boolean>(false);

  const handleTopicChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    setTopic(e.target.value);
  };

  const handleLanguageChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    setLanguage(e.target.value);
  };

  const handleSpeakersChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    setSpeakers(e.target.value);
  };

  const generateScript = (topic: string, speakers: string, language: string): string => {
    // D√©terminer les pr√©fixes de locuteurs en fonction du type d'interlocuteurs
    let speaker1 = 'Speaker R';
    let speaker2 = 'Speaker S';
    
    // Structure compl√®te du podcast
    return `${speaker1}: Bonjour √† tous et bienvenue dans ce nouvel √©pisode de notre podcast. Aujourd'hui, nous allons parler de ${topic}, un sujet fascinant qui m√©rite d'√™tre explor√© en profondeur.

${speaker2}: Tout √† fait ! Ce sujet est particuli√®rement d'actualit√© et suscite beaucoup d'int√©r√™t. Nous allons vous pr√©senter les diff√©rents aspects et enjeux li√©s √† ${topic}.

${speaker1}: Pour commencer, mettons en contexte ce sujet. ${topic} est un domaine qui touche de nombreux aspects de notre soci√©t√© moderne.

${speaker2}: Exactement. Et pour mieux comprendre, posons-nous quelques questions essentielles. Tout d'abord, qu'entend-on exactement par ${topic} ? Quelles sont ses caract√©ristiques principales ?

${speaker1}: ${topic} peut √™tre d√©fini comme un ensemble de concepts et pratiques qui transforment notre fa√ßon de voir et d'interagir avec le monde. Les origines remontent √† plusieurs ann√©es, mais c'est r√©cemment que ce sujet a pris une ampleur consid√©rable.

${speaker2}: Si nous analysons plus en profondeur, quels sont les impacts de ${topic} sur notre quotidien et sur les diff√©rents secteurs d'activit√© ?

${speaker1}: Excellente question ! ${topic} influence de nombreux domaines comme l'√©conomie, la technologie, et m√™me nos interactions sociales. Par exemple, nous observons des changements significatifs dans la mani√®re dont les entreprises abordent leurs strat√©gies.

${speaker2}: Et si nous nous projetons dans l'avenir, comment voyez-vous l'√©volution de ${topic} dans les cinq prochaines ann√©es ? Quelles tendances √©mergentes pouvons-nous anticiper ?

${speaker1}: Les experts pr√©voient une acc√©l√©ration des innovations li√©es √† ${topic}. Nous pourrions voir √©merger de nouvelles applications et des usages que nous n'imaginons pas encore aujourd'hui.

${speaker2}: Abordons maintenant un aspect crucial : les questions √©thiques et les d√©fis li√©s √† ${topic}. Quels sont les risques potentiels et comment pouvons-nous les att√©nuer ?

${speaker1}: C'est un point essentiel. Tout progr√®s s'accompagne de responsabilit√©s. Nous devons √™tre vigilants concernant les questions de confidentialit√©, d'√©quit√© et d'accessibilit√© li√©es √† ${topic}.

${speaker2}: Pour illustrer concr√®tement, prenons un exemple de mise en application r√©ussie de ${topic} dans un contexte r√©el.

${speaker1}: Une √©tude de cas int√©ressante est celle de [exemple fictif adapt√© au sujet]. Cette initiative a d√©montr√© comment ${topic} peut √™tre utilis√© de mani√®re innovante et responsable.

${speaker2}: Pour conclure cet √©pisode, r√©capitulons les points cl√©s que nous avons abord√©s sur ${topic}.

${speaker1}: Nous avons explor√© la d√©finition et le contexte de ${topic}, analys√© ses impacts sur diff√©rents secteurs, anticip√© les √©volutions futures, et discut√© des enjeux √©thiques. 

${speaker2}: Nous esp√©rons que cette discussion vous aura √©clair√©s et donn√©s envie d'aller plus loin dans l'exploration de ${topic}. N'h√©sitez pas √† partager vos r√©flexions ou vos questions.

${speaker1}: Merci de nous avoir √©cout√©s, et nous vous donnons rendez-vous tr√®s bient√¥t pour un nouvel √©pisode tout aussi passionnant !`;
  };

  const handleGeneratePodcast = async () => {
    if (!topic.trim()) {
      setError('Veuillez entrer un sujet pour le podcast');
      return;
    }

    setLoading(true);
    setError(null);
    setAudioUrl(null);
    setShowTranscript(false);

    try {
      // G√©n√©rer un script bas√© sur le sujet, les interlocuteurs et la langue
      const generatedScript = generateScript(topic, speakers, language);
      setTranscript(generatedScript);

      // Envoyer au backend pour synth√®se vocale
      const response = await fetch('/api/tts/synthesize', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ 
          script: generatedScript,
          speakerType: speakers,
          language: language
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || '√âchec de la g√©n√©ration du podcast');
      }

      const blob = await response.blob();
      const url = URL.createObjectURL(blob);
      setAudioUrl(url);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Une erreur inconnue est survenue');
    } finally {
      setLoading(false);
    }
  };

  const handleDownload = () => {
    if (audioUrl) {
      const a = document.createElement('a');
      a.href = audioUrl;
      a.download = `podcast-${topic.substring(0, 20)}.mp3`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
    }
  };

  const toggleTranscript = () => {
    setShowTranscript(!showTranscript);
  };

  const handleTranscribe = async () => {
    if (!audioFile) {
      setError('Veuillez s√©lectionner un fichier audio √† transcrire');
      return;
    }

    setTranscribing(true);
    setError(null);
    setTranscriptionResult('');

    try {
      const formData = new FormData();
      formData.append('file', audioFile);

      const response = await fetch('/api/tts/transcribe', {
        method: 'POST',
        body: formData,
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || '√âchec de la transcription audio');
      }

      const data = await response.json();
      setTranscriptionResult(data.transcription);
      
      // Optionnel : utiliser la transcription comme script pour le podcast
      if (data.transcription) {
        setTranscript(data.transcription);
        setShowTranscript(true);
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Une erreur inconnue est survenue');
    } finally {
      setTranscribing(false);
    }
  };

  return (
    <div className="app-container">
      <header className="app-header">
        <h1 className="app-title">AUDIVA</h1>
        <nav className="app-nav">
          <a href="#" className="nav-link">Cr√©er des podcasts</a>
          <div className="auth-links">
            <a href="#" className="auth-link">Cr√©er un compte</a>
            <a href="#" className="auth-button">Me connecter</a>
          </div>
        </nav>
      </header>

      <main className="main-content">
        <h2 className="main-title">G√©n√©rez des podcasts interactifs<br />avec notre IA conversationnelle</h2>
        
        <section className="transcription-section">
          <h3 className="section-title">Transcription Audio avec GPT-4o Mini Audio</h3>
          
          <div className="transcription-form">
            <div className="form-group">
              <label htmlFor="audio-file">Fichier Audio</label>
              <input
                type="file"
                id="audio-file"
                accept="audio/*"
                onChange={(e) => {
                  if (e.target.files && e.target.files.length > 0) {
                    setAudioFile(e.target.files[0]);
                    setError(null);
                  }
                }}
                className="file-input"
              />
              <small className="file-help">Formats support√©s: MP3, WAV, M4A, etc.</small>
            </div>
            
            <button 
              className="generate-button" 
              onClick={handleTranscribe}
              disabled={transcribing || !audioFile}
            >
              <span className="icon">üé§</span> {transcribing ? 'Transcription en cours...' : 'Transcrire l\'Audio'}
            </button>
            
            {transcriptionResult && (
              <div className="transcription-result">
                <h4>R√©sultat de la Transcription</h4>
                <pre className="transcription-text">{transcriptionResult}</pre>
                <p className="transcription-info">La transcription a √©t√© automatiquement ajout√©e comme script de podcast.</p>
              </div>
            )}
          </div>
        </section>
        
        <section className="podcast-creator">
          <h3 className="section-title">Exp√©rience concepteur</h3>
          
          <div className="creator-form">
            <div className="form-group">
              <label htmlFor="topic">Sujet du Podcast</label>
              <textarea
                id="topic"
                value={topic}
                onChange={handleTopicChange}
                rows={4}
                placeholder="Entrez le sujet de votre podcast..."
              />
            </div>
            
            <div className="form-row">
              <div className="form-group half">
                <label htmlFor="language">
                  <span className="icon">üåê</span> Langue
                </label>
                <select 
                  id="language" 
                  value={language}
                  onChange={handleLanguageChange}
                >
                  <option value="Fran√ßais">Fran√ßais</option>
                  <option value="English">English</option>
                  <option value="Espa√±ol">Espa√±ol</option>
                </select>
              </div>
              
              <div className="form-group half">
                <label htmlFor="speakers">
                  <span className="icon">üë•</span> Intervenants
                </label>
                <select 
                  id="speakers" 
                  value={speakers}
                  onChange={handleSpeakersChange}
                >
                  <option value="Homme & Homme">Homme & Homme</option>
                  <option value="Homme & Femme">Homme & Femme</option>
                  <option value="Femme & Femme">Femme & Femme</option>
                </select>
              </div>
            </div>
            
            <button 
              className="generate-button" 
              onClick={handleGeneratePodcast}
              disabled={loading || !topic.trim()}
            >
              <span className="icon">üéôÔ∏è</span> G√©n√©rer le Podcast
            </button>
          </div>
        </section>
        
        {error && <div className="error-message">{error}</div>}
        
        {audioUrl && (
          <div className="podcast-result">
            <h3>Votre Podcast</h3>
            <audio controls src={audioUrl} className="audio-player" />
            
            <div className="action-buttons">
              <button className="action-button download-button" onClick={handleDownload}>
                T√©l√©charger
              </button>
              <button className="action-button transcript-button" onClick={toggleTranscript}>
                {showTranscript ? 'Masquer la transcription' : 'Afficher la transcription'}
              </button>
            </div>
            
            {showTranscript && (
              <div className="transcript-container">
                <h4>Transcription</h4>
                <pre className="transcript-text">{transcript}</pre>
              </div>
            )}
          </div>
        )}
      </main>
    </div>
  );
}

export default App;
